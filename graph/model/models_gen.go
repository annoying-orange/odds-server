// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Market interface {
	IsMarket()
}

type MatchResult interface {
	IsMatchResult()
}

type Cs struct {
	ID           string   `json:"id"`
	MatchID      string   `json:"matchId"`
	Status       Status   `json:"status"`
	DisplayOrder int      `json:"displayOrder"`
	BetTypeID    int      `json:"betTypeId"`
	O10          *float64 `json:"o10"`
	O20          *float64 `json:"o20"`
	O21          *float64 `json:"o21"`
	O30          *float64 `json:"o30"`
	O31          *float64 `json:"o31"`
	O32          *float64 `json:"o32"`
	O40          *float64 `json:"o40"`
	O41          *float64 `json:"o41"`
	O42          *float64 `json:"o42"`
	O43          *float64 `json:"o43"`
	O00          *float64 `json:"o00"`
	O11          *float64 `json:"o11"`
	O22          *float64 `json:"o22"`
	O33          *float64 `json:"o33"`
	O44          *float64 `json:"o44"`
	O99          *float64 `json:"o99"`
	O01          *float64 `json:"o01"`
	O02          *float64 `json:"o02"`
	O12          *float64 `json:"o12"`
	O03          *float64 `json:"o03"`
	O13          *float64 `json:"o13"`
	O23          *float64 `json:"o23"`
	O04          *float64 `json:"o04"`
	O14          *float64 `json:"o14"`
	O24          *float64 `json:"o24"`
	O34          *float64 `json:"o34"`
	I10          *int     `json:"i10"`
	I20          *int     `json:"i20"`
	I21          *int     `json:"i21"`
	I30          *int     `json:"i30"`
	I31          *int     `json:"i31"`
	I32          *int     `json:"i32"`
	I40          *int     `json:"i40"`
	I41          *int     `json:"i41"`
	I42          *int     `json:"i42"`
	I43          *int     `json:"i43"`
	I00          *int     `json:"i00"`
	I11          *int     `json:"i11"`
	I22          *int     `json:"i22"`
	I33          *int     `json:"i33"`
	I44          *int     `json:"i44"`
	I99          *int     `json:"i99"`
	I01          *int     `json:"i01"`
	I02          *int     `json:"i02"`
	I12          *int     `json:"i12"`
	I03          *int     `json:"i03"`
	I13          *int     `json:"i13"`
	I23          *int     `json:"i23"`
	I04          *int     `json:"i04"`
	I14          *int     `json:"i14"`
	I24          *int     `json:"i24"`
	I34          *int     `json:"i34"`
}

func (Cs) IsMarket()      {}
func (Cs) IsMatchResult() {}

type Hdpou struct {
	ID           string  `json:"id"`
	MatchID      string  `json:"matchId"`
	Status       Status  `json:"status"`
	DisplayOrder int     `json:"displayOrder"`
	BetTypeID    int     `json:"betTypeId"`
	Handicap     float64 `json:"handicap"`
	Hdp1         string  `json:"hdp1"`
	Hdp2         string  `json:"hdp2"`
	O1           float64 `json:"o1"`
	O2           float64 `json:"o2"`
	I1           float64 `json:"i1"`
	I2           float64 `json:"i2"`
}

func (Hdpou) IsMarket()      {}
func (Hdpou) IsMatchResult() {}

type League struct {
	ID           string   `json:"id"`
	Name         string   `json:"name"`
	DisplayOrder int      `json:"displayOrder"`
	Matches      []*Match `json:"matches"`
}

func (League) IsMatchResult() {}

type Mo struct {
	ID           string  `json:"id"`
	MatchID      string  `json:"matchId"`
	Status       Status  `json:"status"`
	DisplayOrder int     `json:"displayOrder"`
	BetTypeID    int     `json:"betTypeId"`
	O1           float64 `json:"o1"`
	O2           float64 `json:"o2"`
	Ox           float64 `json:"ox"`
	I1           float64 `json:"i1"`
	I2           float64 `json:"i2"`
	Ix           float64 `json:"ix"`
}

func (Mo) IsMarket()      {}
func (Mo) IsMatchResult() {}

type Match struct {
	ID           string   `json:"id"`
	MatchTime    int      `json:"matchTime"`
	SportID      int      `json:"sportId"`
	LeagueID     string   `json:"leagueId"`
	Status       Status   `json:"status"`
	LivePeriod   int      `json:"livePeriod"`
	LiveTimer    int      `json:"liveTimer"`
	HomeID       int      `json:"homeId"`
	HomeName     string   `json:"homeName"`
	HomeScore    int      `json:"homeScore"`
	HomeRedcard  int      `json:"homeRedcard"`
	AwayID       int      `json:"awayId"`
	AwayName     string   `json:"awayName"`
	AwayScore    int      `json:"awayScore"`
	AwayRedcard  int      `json:"awayRedcard"`
	More         int      `json:"more"`
	DisplayOrder int      `json:"displayOrder"`
	Markets      []Market `json:"markets"`
}

func (Match) IsMatchResult() {}

type Oe struct {
	ID           string  `json:"id"`
	MatchID      string  `json:"matchId"`
	Status       Status  `json:"status"`
	DisplayOrder int     `json:"displayOrder"`
	BetTypeID    int     `json:"betTypeId"`
	O1           float64 `json:"o1"`
	O2           float64 `json:"o2"`
	I1           float64 `json:"i1"`
	I2           float64 `json:"i2"`
}

func (Oe) IsMarket()      {}
func (Oe) IsMatchResult() {}

type Sport struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Team struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type Period string

const (
	PeriodEarly      Period = "EARLY"
	PeriodToday      Period = "TODAY"
	PeriodFirstHalf  Period = "FIRST_HALF"
	PeriodHt         Period = "HT"
	PeriodSecondHalf Period = "SECOND_HALF"
	PeriodFt         Period = "FT"
)

var AllPeriod = []Period{
	PeriodEarly,
	PeriodToday,
	PeriodFirstHalf,
	PeriodHt,
	PeriodSecondHalf,
	PeriodFt,
}

func (e Period) IsValid() bool {
	switch e {
	case PeriodEarly, PeriodToday, PeriodFirstHalf, PeriodHt, PeriodSecondHalf, PeriodFt:
		return true
	}
	return false
}

func (e Period) String() string {
	return string(e)
}

func (e *Period) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Period(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Period", str)
	}
	return nil
}

func (e Period) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusUnscheduled Status = "UNSCHEDULED"
	StatusScheduled   Status = "SCHEDULED"
	StatusStable      Status = "STABLE"
	StatusInProgress  Status = "IN_PROGRESS"
	StatusPause       Status = "PAUSE"
	StatusComplete    Status = "COMPLETE"
	StatusRefund      Status = "REFUND"
	StatusEnd         Status = "END"
)

var AllStatus = []Status{
	StatusUnscheduled,
	StatusScheduled,
	StatusStable,
	StatusInProgress,
	StatusPause,
	StatusComplete,
	StatusRefund,
	StatusEnd,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusUnscheduled, StatusScheduled, StatusStable, StatusInProgress, StatusPause, StatusComplete, StatusRefund, StatusEnd:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
